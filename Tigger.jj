// Options for JavaCC.
options { LOOKAHEAD=1; FORCE_LA_CHECK=true; }

// Fonction principale
PARSER_BEGIN(Tigger)

import ast.*;
import java.util.*;
import java.lang.AssertionError;
import java.io.*;
import java.lang.System;



public class Tigger
{
  public static VisiteurEvaluation visiteur = new VisiteurEvaluation();
  public static VisiteurPrint printer = new VisiteurPrint();
  
    public static void main(String args[]) throws ParseException
    {
    
    	try{
    		if(args[0].equals("check")){
			InputStream is = new FileInputStream("test.txt");
			System.setIn(is);
			Tigger parser = new Tigger(System.in);
			int n = 0;
			while(n<100){
				try{
			        	Expression exp = parser.mainloop();
		        		System.out.println(exp.accepter(printer) + " = " +exp.accepter(visiteur));
		        		n=n+1;
		        	} catch (Exception e){System.exit(0);}
			}
    		}
    		System.exit(0);
    	}
    	catch (Exception e){
    		System.out.println(e.getMessage());
    	}
    
        Tigger parser = new Tigger(System.in);
        while (true) {
        	try {
        		Expression exp = parser.mainloop();
		        System.out.println(exp.accepter(visiteur));
		     }
		catch (Exception e) {
			//e.printStackTrace(); 
			System.out.println(e.getMessage());
			parser.ReInit(System.in); 
		}
        }
        
    }
}
PARSER_END(Tigger)

// Characters to ignore.
SKIP: { " " | "\r" | "\t" }

// Token specifications.
TOKEN:
{
    < NUMBER: (<DIGIT>)+>  			// A integer number.
|   < DIGIT: ["0"-"9"] >                      // A decimal digit.
|   < EOL: "\n" >                             // End of line.
|   < PRINT : "print" >				// primitive print
|   < LPAR : "(" >				// left parenthesis
|   < RPAR : ")" >				// right parenthesis
|   < COMMA : "," >
|   < IF   : "if" >
|   < THEN : "then" >
|   < ELSE : "else" >
|   < LET  : "let" >
|   < IN   : "in"  >
|   < END  : "end" >		
|   < VAR  : "var" >
|   < FUNCTION : "function" >	
|   < WORD : (["a"-"z"])+(["a"-"z","A"-"Z"])*>
}

// Main lopp: read expressions on a line until end of file.
//     mainloop â†’ (expression <EOL>)* <EOF>
Expression mainloop():
{ Expression exp = null; List<Expression> list = new ArrayList<Expression>(); }
{	 

	(
		      	exp=expression() 
		|	exp = print() { return exp; }	
	)? 	<EOL> {return exp;}

/*	
	      	exp=expression() { return exp; }
	| 	exp = letIn() { return exp; }
	|	exp = ifThenElse() { return exp; }
	|	exp = print() { return exp; }
	|	"quit" {System.exit(0);}
	|	"help"{return new Help();} 	
	|	<EOL> {return exp;}
    	//| <EOL> {exp = mainloop(); return exp;}
*/


}

// Expression (the axiome).
//E -> T ( +T | -T)*
//F -> <NUM> | (E)
Expression expression():
{ Expression exp, a, b; }
{
    a=term() { exp = a; }
    (
      "+" b=term() { exp= new Addition(exp, b); }
      | "-" b=term() { exp= new Soustraction(exp,b);}
      | "<" b=expression() {exp= new Inf(exp,b);}
      | ">" b=expression() {exp= new Sup(exp,b);}
      | "=" b=expression() {exp= new Egal(exp,b);}
      | "<=" b=expression() {exp= new InfEgal(exp,b);}
      | ">=" b=expression() {exp= new SupEgal(exp,b);}
      | "<>" b=expression() {exp= new Different(exp,b);}
    )* { return exp; }
    | a = letIn() {return a;}
    | a = ifThenElse() {return a;}
}

// T -> F (*F|/F)*
Expression term():
{ Expression exp, a, b; }
{
    a=factor() { exp = a; }
    (
      "*" b=factor() { exp= new Multiplication(exp,b); }
    | "/" b=factor() { exp= new Division(exp,b);}
    )* { return exp; }
}

// factor of an expression.
Expression factor():
{ Token t; Expression exp;}
{
    t=<NUMBER> { return new Constante(Integer.parseInt(t.toString())); }
    |"+" t=<NUMBER> { return new Plus( new Constante(Integer.parseInt(t.toString()))); }
    |"-" t=<NUMBER> { return new Moins(new Constante(Integer.parseInt(t.toString()))); }
    | exp = call() {return exp;}
    //|"(" exp= expression() ")" { return exp; }

}

// call to a function or a variable
Expression call():
{Token t; Expression exp; List<Expression> args= new ArrayList<Expression>();}
{
	
	"."t=<WORD> <LPAR> (exp = expression() (",")? {args.add(exp); })* <RPAR> 
		{exp = new FunctionCall(t.toString(), args); return exp;} 
	|
	
	t=<WORD> { 
			if(t.toString().equals("quit") ) {
				System.exit(0);
			} 
			else if (t.toString().equals("help") ) {
				return new Help();
			}
			else{
			exp = new VariableCall(new String(""+t)); return exp; 
			}
		}
}

// Boolean expression
Expression ifThenElse():
{Expression a, b, c, exp;}
{
	<IF> a=expression() <THEN> b=expression() <ELSE> c=expression() {exp = new IfThenElse(a,b,c); return exp;}
}


// let in end 
Expression letIn():
{Expression vd, exp; Token name; Expression fd; List<VariableDec> let; List<FunctionDec> fl; List<Expression> in;}
{
	{ let = new ArrayList<VariableDec>(); }
	{ in = new ArrayList<Expression>(); }
	{ fl = new ArrayList<FunctionDec>();}
	
	<LET> 
		(
			(<VAR> name=<WORD> ":=" vd=expression() { let.add(new VariableDec(new String(""+name), vd)); })* 				<IN> (exp=expression() (",")? {in.add(exp);})* <END> { exp = new LetIn(let, in); return exp;}
			|
			(fd = functionDec() {fl.add( (FunctionDec) fd);})* <IN> (exp=expression() (",")? {in.add(exp);})* 
			<END> {exp = new LetInFunction(fl, in); return exp;}
			
		)
}


//function declaration 
Expression functionDec():
{Expression exp, v; Token name; List<Expression> args; }
{
	{ args = new ArrayList<Expression>(); }
	
	<FUNCTION> name=<WORD> <LPAR> (exp = expression() (",")? {args.add(exp); })* <RPAR> 
	"=" v=expression() {exp = new FunctionDec(name.toString(), v, args) ; return exp;}

}

//primitive print
Expression print():
{Expression a, exp; }
{
       	<PRINT><LPAR>a=expression()<RPAR> {}        
        {exp = new Print(a); return exp;}
}


